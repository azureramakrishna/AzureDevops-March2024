Topics covered: 45 days
--------------

1. IAC (Infrastructure as a code)
    ARMTemplates (JSON)
    Terraform 
2. AzureDevops (SAAS)
    Azure Boards (agile)
    Azure repo (git & github)
    Azure Pipelines (CI CD)
        Classic editor (GUI)
        YAML pipeline 
3. Docker & Kubernets 
    ACI (Azure container instance)
    ACR (Azure container registry)
    AKS (Azure Kubernets service)



Why IAC? (Infrastructure as a code):
-----------------------------------
1. Automated way deployment 
2. Repeatable
3. Predictable
4. they are everywhere 


ARMTemplates Structure:  https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/syntax
----------------------
1. Schema           - Version of the JSON file
2. ContentVersion   - to maintain the constant version across multiple templates (ex: 1.0.0.0)
3. Parameters       - expected values from end user during the deployment 
4. Variables        - defined withing template file and cant modify during deployment 
5. Resources        - resources that you want like storage, vm, sqldb, webapp etc
6. Outputs          - values needed after resource creation (ex: vm ip address)

Getting started:
---------------
    https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/quickstart-create-templates-use-visual-studio-code

1. Install the vscode
2. Azure Resource Manager (ARM) Tools extension

ARMTemplates resources: https://learn.microsoft.com/en-us/azure/templates/

Functions:

resourcegroup().location
contact
toLower
CopyIndex()
copy
dependsOn
resourceId
reference
id

Azure - ARMTemplates & Bicep 
AWS - CloudFormation 

Terraform:
---------

ARMTemplates                                                        Terraform
------------                                                        ---------
1. IAC tool                                                         1. IAC tool 
2. Specific to Azure                                                2. Opensource (Azure, AWS, GCP, OCI etc and onprem)
3. JSON Format                                                      3. HCL (Hashicorp configuration language) language
4. Extension .JSON                                                  4. Extension .tf
5. template.json                                                    5. main.tf
    parameters.json                                                     variable.tf
6. Schema                                                           6. Terraform building blocks
    contentversion                                                      provider
    parameters                                                          resources
    variables                                                           output
    resources
    outpts
7. Azure Powershell/CLI Commands                                    7. Terraform lifecycle
    New-AzResourceGroupDeployment `                                     terraform init
    -ResourceGroupName "" `                                             terraform fmt
    -TemplateFile "" `                                                  terraform validate
    -TemplateParametersFile "" `                                        terraform plan
    -Verbose                                                            terraform apply 
                                                                        terraform destroy

Getting started with terraform:
------------------------------
Install terraform: https://developer.hashicorp.com/terraform/install
Extracted the zip file and copy paste the terraform.exe file to c:/windows
open any terminal --> type terraform 
terraform -version : v1.7.5

vscode extensions:
- Hashicorp terraform
- Azure terraform


Terraform data sources:
----------------------

RG
VNET
SNET
KEYVAULT



AzureDevops:
-----------

Azure Boards:
------------

Processes
    Basic
    Agile
    Scrum
    CMMI

Epic
feature
userstory
task
issue

Sprint1 (Iterations) Model - 2 weeks duration  April 15th - April 26th
Sprint2                                        April 29th - May 10th

Sprint planning 
    capacity planning
    User stories
    Task - 16hr

Daily standup calls - 10 to 15mins

Retrospective:

what went well
what can be improved
what didn't went well



Epic        develop an applcation like Amazon
Feature     signup page 
Backlog     login page
            home page 
            products catelog
            add to cart
            payment gateway
            tracking 
            help + support

Userstory   signup page for amazon
            loging page


Task        singup page with google
            singup page with apple id
            signup page with email and password

            login with google account
            login with apple id
            login with email and password

Issue



Git & GitHub:
------------
Download git: https://git-scm.com/downloads



git clone https://Saanvikit-March24@dev.azure.com/Saanvikit-March24/Iac/_git/Iac

Git commands:
https://confluence.atlassian.com/bitbucketserver/basic-git-commands-776639767.html

Azure Repo's: (Git)
------------

Version control system:
  - Centralized version control system
  - Distributed version control system (git)

  784  git clone https://Feb-2024@dev.azure.com/Feb-2024/SAANVIKIT/_git/SAANVIKIT
  785  git config --global user.name "ramakrishna"
  786  git config --global user.email saanvikitfeb2024@gmail.com
  787  cd SAANVIKIT
  788  git status
  789  git add .
  790  git status
  791  git commit -m "New file added"
  792  git status
  793  git push origin main
  794  git push origin main
  795  git push origin main
  796  git --all
  797  git --all
  798  git push origin main

       git branch
  809  git branch --all
  810  git branch --all
  811  git fetch --all
  812  git branch
  813  git checkout develop
  814  git branch
  815  git branch --all
  816  git branch
  817  git checkout -b feature/vm-size
  818  git status
  819  git add .
  820  git status
  821  git commit -m "vm size modified"
  822  git push origin feature/vm-size

  866  git push -d origin feature/remove-spn
  867  git branc --all
  868  git branch --all
  869  git pull
  870  git fetch 
  871  git branch --all
  872  git puh -d origin feature/vm-size
  873  git push -d origin feature/vm-size
  874  clear
  875  git branch
  876  git status
  877  git add .
  878  git commit -m "removed username"
  879  git log
  880  git revet e58ea129881d1acd3a9fe961414272bec0074233
  881  git revert e58ea129881d1acd3a9fe961414272bec0074233


Git Commands:
-------------
  git config --global user.name "ramakrishna"
  git config --global user.eamil "azureramakrishna@gmail.com"

  git clone <cloning ulr>                 To clone remote repository to local

  git status                              see the changes of files and folders
  git add .                               add the files to local staging directory
  git commit -m "commit message"          commit the changes to your local repository
  git push origin main                    push the local branch to remote

  git checkout <branch-name>              switch the branch 
  git checkout -b <branch-name>           create a new branch

  git pull  (fetch + merge)               bring all the changes and merge of remote branch to local branch
  git fetch                               brings the information of remote branch to local branch

  git merge develop                       merge the changes of another branch to active branch

  git branch -d <branch-name>             delete the local branch
  git push -d origin <branch-name>        delete the remote branch

  git log                                 list all the commit history
  git revert <commit-id>                  revert the changes

  git branch                              list all the local branches
  git branch --all                        list all the local and remote branches



Azure Pipelines:
---------------

Pre-requisites:
--------------
1. Service connection
2. Agent Pool (VM)
        - Microsoft hosted agent
            submit the request form: https://forms.office.com/pages/responsepage.aspx?id=v4j5cvGGr0GRqy180BHbR5zsR558741CrNi6q8iTpANURUhKMVA3WE4wMFhHRExTVlpET1BEMlZSTCQlQCN0PWcu

        - Self hosted agent
            Azure VM (Windows or Linux)

ARMTemplates using azure pipelines.

Azure pipelines
    - Classic editor
    - YAML pipeline (pipeline as a code)